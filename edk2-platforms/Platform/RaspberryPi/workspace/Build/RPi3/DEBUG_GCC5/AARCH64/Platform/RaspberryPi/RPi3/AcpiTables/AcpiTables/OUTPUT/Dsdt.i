#undef MIN
#undef MAX
/** @file
 *
 *  Differentiated System Definition Table (DSDT)
 *
 *  Copyright (c) 2018, Andrey Warkentin <andrey.warkentin@gmail.com>
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *
 *  SPDX-License-Identifier: BSD-2-Clause-Patent
 *
 **/

#define BCM_ALT0 0x4
#define BCM_ALT1 0x5
#define BCM_ALT2 0x6
#define BCM_ALT3 0x7
#define BCM_ALT4 0x3
#define BCM_ALT5 0x2

DefinitionBlock ("Dsdt.aml", "DSDT", 5, "MSFT", "EDK2", 2)
{
  Scope (\_SB_)
  {
    /** @file
     *
     *  [DSDT] SD controller/card definition (SDHC)
     *
     *  Copyright (c) 2018, Andrey Warkentin <andrey.warkentin@gmail.com>
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *
     *  SPDX-License-Identifier: BSD-2-Clause-Patent
     *
     **/
    
    //
    // Note: UEFI can use either SDHost or Arasan. We expose both to the OS.
    //
    
    // ArasanSD 3.0 SD Host Controller.
    Device (SDC1)
    {
      Name (_HID, "BCM2847")
      Name (_CID, "ARASAN")
      Name (_UID, 0x0)
      Name (_CCA, 0x0)
      Name (_S1D, 0x1)
      Name (_S2D, 0x1)
      Name (_S3D, 0x1)
      Name (_S4D, 0x1)
      Method (_STA)
      {
        Return(0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          MEMORY32FIXED (ReadWrite, 0x3F300000, 0x100,)
          Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x5E }
        })
        Return (RBUF)
      }
    
      //
      // A child device that represents the
      // sd card, which is marked as non-removable.
      //
      Device (SDMM)
      {
        Method (_ADR)
        {
          Return (0)
        }
        Method (_RMV) // Is removable
        {
          Return (0) // 0 - fixed
        }
      }
    }
    
    
    // Broadcom SDHost 2.0 SD Host Controller
    Device (SDC2)
    {
      Name (_HID, "BCM2855")
      Name (_CID, "SDHST")
      Name (_UID, 0x0)
      Name (_CCA, 0x0)
      Name (_S1D, 0x1)
      Name (_S2D, 0x1)
      Name (_S3D, 0x1)
      Name (_S4D, 0x1)
      Method (_STA)
      {
        Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          MEMORY32FIXED (ReadWrite, 0x3F202000, 0x100,)
          Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x58 }
        })
        Return (RBUF)
      }
    
      //
      // A child device that represents the
      // sd card, which is marked as non-removable.
      //
      Device (SDMM)
      {
        Method (_ADR)
        {
          Return (0)
        }
        Method (_RMV) // Is removable
        {
          Return (0) // 0 - fixed
        }
      }
    }

    /** @file
     *
     *  Platform Extension Plugin (PEP).
     *
     *  Copyright (c) 2018, Andrey Warkentin <andrey.warkentin@gmail.com>
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *
     *  SPDX-License-Identifier: BSD-2-Clause-Patent
     *
     **/
    
    Device(PEPD)
    {
      //
      // RPI3 PEP virtual device.
      //
      Name (_HID, "BCM2854") // Note: since pep on rpi3 is virtual device,
      Name (_CID, "BCM2854") // its device id needs to be generated by Microsoft
      Name (_UID, 0x0)
      Name (_CRS, ResourceTemplate ()
      {
        // No hardware resources for PEP driver are needed.
      })
    
      //
      // Processor info. PEP proprietary method to return
      // PEP_PROCESSOR_TABLE_PLAT structure.
      //
      // See Pep.h and Pep.c.
      //
      Name (_GPI, Buffer()
      {
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x5F, 0x00, 0x53,
        0x00, 0x42, 0x00, 0x2E, 0x00, 0x43, 0x00, 0x50, 0x00, 0x55, 0x00, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      })
    
      //
      // Coordinated state info. PEP proprietary method to return
      // PEP_COORDINATED_STATE_TABLE_PLAT structure.
      //
      // See Pep.h and Pep.c.
      //
      Name (_GCI, Buffer()
      {
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
      })
    
      //
      // Device info. PEP proprietary method to return
      // PEP_DEVICE_TABLE_PLAT structure.
      //
      // See Pep.h and Pep.c.
      //
      Name (_GDI, Buffer()
      {
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x5F, 0x00, 0x53,
        0x00, 0x42, 0x00, 0x2E, 0x00, 0x49, 0x00, 0x32, 0x00, 0x43, 0x00, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      })
    }


    Device (CPU0)
    {
      Name (_HID, "ACPI0007")
      Name (_UID, 0x0)
      Method (_STA)
      {
        Return (0xf)
      }
    }

    Device (CPU1)
    {
      Name (_HID, "ACPI0007")
      Name (_UID, 0x1)
      Method (_STA)
      {
        Return (0xf)
      }
    }

    Device (CPU2)
    {
      Name (_HID, "ACPI0007")
      Name (_UID, 0x2)
      Method (_STA)
      {
        Return (0xf)
      }
    }

    Device (CPU3)
    {
      Name (_HID, "ACPI0007")
      Name (_UID, 0x3)
      Method (_STA)
      {
        Return (0xf)
      }
    }

    // DWC OTG Controller
    Device (USB0)
    {
      Name (_HID, "BCM2848")
      Name (_CID, Package() { "DWC_OTG", "DWC2_OTG"})
      Name (_UID, 0x0)
      Name (_CCA, 0x0)
      Method (_STA)
      {
        Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          MEMORY32FIXED(ReadWrite, 0x3F980000, 0x10000,)
          Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x29 }
        })
        Return(RBUF)
      }
    }

    // Video Core 4 GPU
    Device (GPU0)
    {
      Name (_HID, "BCM2850")
      Name (_CID, "VC4")
      Name (_UID, 0x0)
      Name (_CCA, 0x0)
      Method (_STA)
      {
        Return(0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          // Memory and interrupt for the GPU
          MEMORY32FIXED(ReadWrite, 0x3FC00000, 0x1000,)
          Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x2A }

          // HVS - Hardware Video Scalar
          MEMORY32FIXED (ReadWrite, 0x3F400000, 0x6000,)
          // The HVS interrupt is reserved by the VPU
          // Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x41 }

          // PixelValve0 - DSI0 or DPI
          // MEMORY32FIXED (ReadWrite, 0x3F206000, 0x100,)
          // Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x4D }

          // PixelValve1 - DS1 or SMI
          // MEMORY32FIXED (ReadWrite, 0x73F207000, 0x100,)
          // Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x4E }

          // PixelValve2 - HDMI output - connected to HVS display FIFO 1
          MEMORY32FIXED (ReadWrite, 0x3F807000, 0x100,)
          Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x4A }

          // HDMI registers
          MEMORY32FIXED (ReadWrite, 0x3F902000, 0x600,)   // HDMI registers
          MEMORY32FIXED (ReadWrite, 0x3F808000, 0x100,)   // HD registers
          // hdmi_int[0]
          // Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x48 }
          // hdmi_int[1]
          // Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x49 }

          // HDMI DDC connection
          I2CSerialBus (0x50,, 100000,, "\\_SB.I2C2",,,,)  // EDID
          I2CSerialBus (0x30,, 100000,, "\\_SB.I2C2",,,,)  // E-DDC Segment Pointer
        })
        Return(RBUF)
      }

      // GPU Power Management Component Data
      // Reference : https://github.com/Microsoft/graphics-driver-samples/wiki/Install-Driver-in-a-Windows-VM
      Method (PMCD, 0, Serialized)
      {
        Name (RBUF, Package ()
        {
          1,                  // Version
          1,                  // Number of graphics power components
          Package ()          // Power components package
          {
            Package ()        // GPU component package
            {
              0,              // Component Index
              0,              // DXGK_POWER_COMPONENT_MAPPING.ComponentType (0 = DXGK_POWER_COMPONENT_ENGINE)
              0,              // DXGK_POWER_COMPONENT_MAPPING.NodeIndex

              Buffer ()       // DXGK_POWER_RUNTIME_COMPONENT.ComponentGuid
              {               // 9B2D1E26-1575-4747-8FC0-B9EB4BAA2D2B
                0x26, 0x1E, 0x2D, 0x9B, 0x75, 0x15, 0x47, 0x47,
                0x8f, 0xc0, 0xb9, 0xeb, 0x4b, 0xaa, 0x2d, 0x2b
              },

              "VC4_Engine_00",// DXGK_POWER_RUNTIME_COMPONENT.ComponentName
              2,              // DXGK_POWER_RUNTIME_COMPONENT.StateCount

              Package ()      // DXGK_POWER_RUNTIME_COMPONENT.States[] package
              {
                Package ()   // F0
                {
                  0,         // DXGK_POWER_RUNTIME_STATE.TransitionLatency
                  0,         // DXGK_POWER_RUNTIME_STATE.ResidencyRequirement
                  1210000,   // DXGK_POWER_RUNTIME_STATE.NominalPower (microwatt)
                },

                Package ()   // F1 - Placeholder
                {
                  10000,     // DXGK_POWER_RUNTIME_STATE.TransitionLatency
                  10000,     // DXGK_POWER_RUNTIME_STATE.ResidencyRequirement
                  4,         // DXGK_POWER_RUNTIME_STATE.NominalPower
                },
              }
            }
          }
        })
        Return (RBUF)
      }
    }

    // PiQ Mailbox Driver
    Device (RPIQ)
    {
      Name (_HID, "BCM2849")
      Name (_CID, "RPIQ")
      Name (_UID, 0)
      Name (_CCA, 0x0)
      Method (_STA)
      {
        Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          Memory32Fixed (ReadWrite, 0x3F00B880, 0x00000024,)
          Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x61 }
        })
        Return (RBUF)
      }
    }

    // VCHIQ Driver
    Device (VCIQ)
    {
      Name (_HID, "BCM2835")
      Name (_CID, "VCIQ")
      Name (_UID, 0)
      Name (_CCA, 0x0)
      Name (_DEP, Package() { \_SB.RPIQ })
      Method (_STA)
      {
         Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          Memory32Fixed (ReadWrite, 0x3F00B840, 0x00000010,)
          Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x62 }
        })
        Return (RBUF)
      }
    }

    // VC Shared Memory Driver
    Device (VCSM)
    {
      Name (_HID, "BCM2856")
      Name (_CID, "VCSM")
      Name (_UID, 0)
      Name (_CCA, 0x0)
      Name (_DEP, Package() { \_SB.VCIQ })
      Method (_STA)
      {
        Return (0xf)
      }
    }

    // Description: GPIO
    Device (GPI0)
    {
      Name (_HID, "BCM2845")
      Name (_CID, "BCMGPIO")
      Name (_UID, 0x0)
      Name (_CCA, 0x0)
      Method (_STA)
      {
        Return(0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          MEMORY32FIXED (ReadWrite, 0x3F200000, 0xB4, )
          Interrupt (ResourceConsumer, Level, ActiveHigh, Shared) { 0x51 }
          Interrupt (ResourceConsumer, Level, ActiveHigh, Shared) { 0x53 }
        })
        Return (RBUF)
      }
    }

    // Description: I2C
    Device (I2C1)
    {
      Name (_HID, "BCM2841")
      Name (_CID, "BCMI2C")
      Name (_UID, 0x1)
      Name (_CCA, 0x0)
      Method (_STA)
      {
        Return(0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          Memory32Fixed(ReadWrite, 0x3F804000, 0x20)
          Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) {0x55}

          //
          // MsftFunctionConfig is encoded as the VendorLong.
          //
          // MsftFunctionConfig (Exclusive, PullUp, BCM_ALT0, "\\_SB.GPI0", 0, ResourceConsumer,) {2, 3}
          //
          VendorLong ()      // Length = 0x31
          {
            /* 0000 */  0x00, 0x60, 0x44, 0xD5, 0xF3, 0x1F, 0x11, 0x60,  // .`D....`
            /* 0008 */  0x4A, 0xB8, 0xB0, 0x9C, 0x2D, 0x23, 0x30, 0xDD,  // J...-#0.
            /* 0010 */  0x2F, 0x8D, 0x1D, 0x00, 0x01, 0x10, 0x00, 0x01,  // /.......
            /* 0018 */  0x04, 0x00, 0x12, 0x00, 0x00, 0x16, 0x00, 0x20,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x5C,  // ........
            /* 0028 */  0x5F, 0x53, 0x42, 0x2E, 0x47, 0x50, 0x49, 0x30,  // _SB.GPI0
            /* 0030 */  0x00                                             // .
          }
        })
        Return (RBUF)
      }
    }

    // I2C2 is the HDMI DDC connection
    Device (I2C2)
    {
      Name (_HID, "BCM2841")
      Name (_CID, "BCMI2C")
      Name (_UID, 0x2)
      Name (_CCA, 0x0)
      Method (_STA)
      {
        Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate()
        {
          Memory32Fixed (ReadWrite, 0x3F805000, 0x20)
          Interrupt (ResourceConsumer, Level, ActiveHigh, Shared) {0x55}
        })
        Return (RBUF)
      }
    }

    // SPI
    Device (SPI0)
    {
      Name (_HID, "BCM2838")
      Name (_CID, "BCMSPI0")
      Name (_UID, 0x0)
      Name (_CCA, 0x0)
      Method (_STA)
      {
        Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          MEMORY32FIXED (ReadWrite, 0x3F204000, 0x20,)
          Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) {0x56}

          //
          // MsftFunctionConfig is encoded as the VendorLong.
          //
          // MsftFunctionConfig (Exclusive, PullDown, BCM_ALT0, "\\_SB.GPI0", 0, ResourceConsumer, ) {9, 10, 11} // MISO, MOSI, SCLK
          VendorLong ()      // Length = 0x33
          {
            /* 0000 */  0x00, 0x60, 0x44, 0xD5, 0xF3, 0x1F, 0x11, 0x60,  // .`D....`
            /* 0008 */  0x4A, 0xB8, 0xB0, 0x9C, 0x2D, 0x23, 0x30, 0xDD,  // J...-#0.
            /* 0010 */  0x2F, 0x8D, 0x1F, 0x00, 0x01, 0x10, 0x00, 0x02,  // /.......
            /* 0018 */  0x04, 0x00, 0x12, 0x00, 0x00, 0x18, 0x00, 0x22,  // ......."
            /* 0020 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B,  // ........
            /* 0028 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x47, 0x50,  // .\_SB.GP
            /* 0030 */  0x49, 0x30, 0x00                                 // I0.
          }

          //
          // MsftFunctionConfig is encoded as the VendorLong.
          //
          // MsftFunctionConfig (Exclusive, PullUp, BCM_ALT0, "\\_SB.GPI0", 0, ResourceConsumer, ) {8}     // CE0
          VendorLong ()      // Length = 0x2F
          {
            /* 0000 */  0x00, 0x60, 0x44, 0xD5, 0xF3, 0x1F, 0x11, 0x60,  // .`D....`
            /* 0008 */  0x4A, 0xB8, 0xB0, 0x9C, 0x2D, 0x23, 0x30, 0xDD,  // J...-#0.
            /* 0010 */  0x2F, 0x8D, 0x1B, 0x00, 0x01, 0x10, 0x00, 0x01,  // /.......
            /* 0018 */  0x04, 0x00, 0x12, 0x00, 0x00, 0x14, 0x00, 0x1E,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
            /* 0028 */  0x42, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00         // B.GPI0.
          }

          //
          // MsftFunctionConfig is encoded as the VendorLong.
          //
          // MsftFunctionConfig (Exclusive, PullUp, BCM_ALT0, "\\_SB.GPI0", 0, ResourceConsumer, ) {7}     // CE1
          VendorLong ()      // Length = 0x2F
          {
            /* 0000 */  0x00, 0x60, 0x44, 0xD5, 0xF3, 0x1F, 0x11, 0x60,  // .`D....`
            /* 0008 */  0x4A, 0xB8, 0xB0, 0x9C, 0x2D, 0x23, 0x30, 0xDD,  // J...-#0.
            /* 0010 */  0x2F, 0x8D, 0x1B, 0x00, 0x01, 0x10, 0x00, 0x01,  // /.......
            /* 0018 */  0x04, 0x00, 0x12, 0x00, 0x00, 0x14, 0x00, 0x1E,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x07, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
            /* 0028 */  0x42, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00         // B.GPI0.
          }
        })
        Return (RBUF)
      }
    }

    Device (SPI1)
    {
      Name (_HID, "BCM2839")
      Name (_CID, "BCMAUXSPI")
      Name (_UID, 0x1)
      Name (_CCA, 0x0)
      Name (_DEP, Package() { \_SB.RPIQ })
      Method (_STA)
      {
        Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          MEMORY32FIXED (ReadWrite, 0x3F215080, 0x40,)
          Interrupt (ResourceConsumer, Level, ActiveHigh, Shared,) {0x3D}

          //
          // MsftFunctionConfig is encoded as the VendorLong.
          //
          // MsftFunctionConfig(Exclusive, PullDown, BCM_ALT4, "\\_SB.GPI0", 0, ResourceConsumer, ) {19, 20, 21} // MISO, MOSI, SCLK
          VendorLong ()      // Length = 0x33
          {
            /* 0000 */  0x00, 0x60, 0x44, 0xD5, 0xF3, 0x1F, 0x11, 0x60,  // .`D....`
            /* 0008 */  0x4A, 0xB8, 0xB0, 0x9C, 0x2D, 0x23, 0x30, 0xDD,  // J...-#0.
            /* 0010 */  0x2F, 0x8D, 0x1F, 0x00, 0x01, 0x10, 0x00, 0x02,  // /.......
            /* 0018 */  0x03, 0x00, 0x12, 0x00, 0x00, 0x18, 0x00, 0x22,  // ......."
            /* 0020 */  0x00, 0x00, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15,  // ........
            /* 0028 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x47, 0x50,  // .\_SB.GP
            /* 0030 */  0x49, 0x30, 0x00                                 // I0.
          }

          //
          // MsftFunctionConfig is encoded as the VendorLong.
          //
          // MsftFunctionConfig(Exclusive, PullDown, BCM_ALT4, "\\_SB.GPI0", 0, ResourceConsumer, ) {16} // CE2
          VendorLong ()      // Length = 0x2F
          {
            /* 0000 */  0x00, 0x60, 0x44, 0xD5, 0xF3, 0x1F, 0x11, 0x60,  // .`D....`
            /* 0008 */  0x4A, 0xB8, 0xB0, 0x9C, 0x2D, 0x23, 0x30, 0xDD,  // J...-#0.
            /* 0010 */  0x2F, 0x8D, 0x1B, 0x00, 0x01, 0x10, 0x00, 0x02,  // /.......
            /* 0018 */  0x03, 0x00, 0x12, 0x00, 0x00, 0x14, 0x00, 0x1E,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
            /* 0028 */  0x42, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00         // B.GPI0.
          }
        })
        Return (RBUF)
      }
    }

    // SPI2 has no pins on GPIO header
    // Device (SPI2)
    // {
    //   Name (_HID, "BCM2839")
    //   Name (_CID, "BCMAUXSPI")
    //   Name (_UID, 0x2)
    //   Name (_CCA, 0x0)
    //   Name (_DEP, Package() { \_SB.RPIQ })
    //   Method (_STA)
    //   {
    //     Return (0xf)     // Disabled
    //   }
    //   Method (_CRS, 0x0, Serialized)
    //   {
    //     Name (RBUF, ResourceTemplate ()
    //     {
    //       MEMORY32FIXED (ReadWrite, 0x3F2150C0, 0x40,)
    //       Interrupt (ResourceConsumer, Level, ActiveHigh, Shared,) {0x3D}
    //     })
    //     Return (RBUF)
    //   }
    // }

    // PWM Driver
    Device (PWM0)
    {
      Name (_HID, "BCM2844")
      Name (_CID, "BCM2844")
      Name (_UID, 0)
      Name (_CCA, 0x0)
      Method (_STA)
      {
        Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          // DMA channel 11 control
          Memory32Fixed (ReadWrite, 0x3F007B00, 0x00000100,)
          // PWM control
          Memory32Fixed (ReadWrite, 0x3F20C000, 0x00000028,)
          // PWM control bus
          Memory32Fixed (ReadWrite, 0x7E20C000, 0x00000028,)
          // PWM control uncached
          Memory32Fixed (ReadWrite, 0xFF20C000, 0x00000028,)
          // PWM clock control
          Memory32Fixed (ReadWrite, 0x3F1010A0, 0x00000008,)
          // Interrupt DMA channel 11
          Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x3B }
          // DMA channel 11, DREQ 5 for PWM
          FixedDMA (5, 11, Width32Bit, )
        })
        Return (RBUF)
      }
    }

    /** @file
     *
     *  [DSDT] Serial devices (UART).
     *
     *  Copyright (c) 2018, Andrey Warkentin <andrey.warkentin@gmail.com>
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *
     *  SPDX-License-Identifier: BSD-2-Clause-Patent
     *
     **/
    
    // PL011 based UART.
    Device (URT0)
    {
      Name (_HID, "BCM2837")
      Name (_CID, "HID3123")
      Name (_UID, 0x4)
      Name (_CCA, 0x0)
      Method (_STA)
      {
        Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          MEMORY32FIXED (ReadWrite, 0x3F201000, 0x1000,)
          Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive) { 0x59 }
        })
        Return (RBUF)
      }
    
      Name (CLCK, 3000000)
    
      Name (_DSD, Package ()
      {
        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"), Package ()
        {
          Package (2) { "clock-frequency", CLCK },
        }
      })
    }
    
    //
    // UART Mini.
    //
    // This device is referenced in the DBG2 table, which will cause the system to
    // not start the driver when the debugger is enabled and to mark the device
    // with problem code 53 (CM_PROB_USED_BY_DEBUGGER).
    //
    
    Device (URTM)
    {
      Name (_HID, "BCM2836")
      Name (_CID, "MINIUART")
      Name (_UID, 0x0)
      Name (_CCA, 0x0)
      Method (_STA)
      {
        Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          MEMORY32FIXED (ReadWrite, 0x3F215000, 0x70,)
          Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) {0x3D}
    
          // NTRAID#MSFT-7141401-2016/04/7-jordanrh - disable UART muxing
          // until a proper solution can be created for the dmap conflict.
          // When muxing is enabled, must consider DBG2 table conflict.
          // The alternate function resource needs to be reserved when
          // the kernel debugger is enabled to prevent another client
          // from muxing the pins away.
    
          //
          // MsftFunctionConfig is encoded as the VendorLong.
          //
          // MsftFunctionConfig(Exclusive, PullDown, BCM_ALT5, "\\_SB.GPI0", 0, ResourceConsumer, ) {14, 15}
          // VendorLong  ()      // Length = 0x31
          // {
          //   /* 0000 */  0x00, 0x60, 0x44, 0xD5, 0xF3, 0x1F, 0x11, 0x60,  // .`D....`
          //   /* 0008 */  0x4A, 0xB8, 0xB0, 0x9C, 0x2D, 0x23, 0x30, 0xDD,  // J...-#0.
          //   /* 0010 */  0x2F, 0x8D, 0x1D, 0x00, 0x01, 0x10, 0x00, 0x02,  // /.......
          //   /* 0018 */  0x02, 0x00, 0x12, 0x00, 0x00, 0x16, 0x00, 0x20,  // .......
          //   /* 0020 */  0x00, 0x00, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x5C,  // .......\
          //   /* 0028 */  0x5F, 0x53, 0x42, 0x2E, 0x47, 0x50, 0x49, 0x30,  // _SB.GPI0
          //   /* 0030 */  0x00                                             // .
          //}
    
        })
        Return (RBUF)
      }
    }
    
    //
    // Multifunction serial bus device to support Bluetooth function.
    //
    Device(BTH0)
    {
      Name (_HID, "BCM2EA6")
      Name (_CID, "BCM2EA6")
      Method (_STA)
      {
        Return (0xf)
      }
      Method (_CRS, 0x0, Serialized)
      {
        Name (RBUF, ResourceTemplate ()
        {
          // BT UART: UART0 (PL011)
          UARTSerialBus(
            115200,        // InitialBaudRate: in BPS
            ,              // BitsPerByte: default to 8 bits
            ,              // StopBits: Defaults to one bit
            0x00,          // LinesInUse: 8 1-bit flags to
                           //   declare enabled control lines.
                           //   Raspberry Pi does not exposed
                           //   HW control signals -> not supported.
                           //   Optional bits:
                           //   - Bit 7 (0x80) Request To Send (RTS)
                           //   - Bit 6 (0x40) Clear To Send (CTS)
                           //   - Bit 5 (0x20) Data Terminal Ready (DTR)
                           //   - Bit 4 (0x10) Data Set Ready (DSR)
                           //   - Bit 3 (0x08) Ring Indicator (RI)
                           //   - Bit 2 (0x04) Data Carrier Detect (DTD)
                           //   - Bit 1 (0x02) Reserved. Must be 0.
                           //   - Bit 0 (0x01) Reserved. Must be 0.
            ,              // IsBigEndian:
                           //   default to LittleEndian.
            ,              // Parity: Defaults to no parity
            ,              // FlowControl: Defaults to
                           //   no flow control.
            16,            // ReceiveBufferSize
            16,            // TransmitBufferSize
            "\\_SB.URT0",  // ResourceSource:
                           //   UART bus controller name
            ,              // ResourceSourceIndex: assumed to be 0
            ,              // ResourceUsage: assumed to be
                           //   ResourceConsumer
            UAR0,          // DescriptorName: creates name
                           //   for offset of resource descriptor
          )                // Vendor data
    
          //
          // RPIQ connection for BT_ON/OFF
          //
          GpioIO (Shared, PullUp, 0, 0, IoRestrictionNone, "\\_SB.RPIQ", 0, ResourceConsumer, , ) { 128 }
        })
        Return (RBUF)
      }
    }

    /** @file
     *
     *  [DSDT] RHProxy device to enable WinRT API (RHPX)
     *
     *  Copyright (c) 2018, Andrey Warkentin <andrey.warkentin@gmail.com>
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *
     *  SPDX-License-Identifier: BSD-2-Clause-Patent
     *
     **/
    
    Device (RHPX)
    {
      Name (_HID, "MSFT8000")
      Name (_CID, "MSFT8000")
      Name (_UID, 1)
    
      Name(_CRS, ResourceTemplate ()
      {
        // Index 0
        SPISerialBus (           // SCKL - GPIO 11 - Pin 23
                                 // MOSI - GPIO 10 - Pin 19
                                 // MISO - GPIO 9  - Pin 21
                                 // CE0  - GPIO 8  - Pin 24
          0,                     // Device selection (CE0)
          PolarityLow,           // Device selection polarity
          FourWireMode,          // WireMode
          8,                     // DataBit len
          ControllerInitiated,   // Slave mode
          4000000,               // Connection speed
          ClockPolarityLow,      // Clock polarity
          ClockPhaseFirst,       // Clock phase
          "\\_SB.SPI0",          // ResourceSource: SPI bus controller name
          0,                     // ResourceSourceIndex
                                 // Resource usage
                                 // DescriptorName: creates name for offset of resource descriptor
        )                        // Vendor Data
    
        // Index 1
        SPISerialBus (           // SCKL - GPIO 11 - Pin 23
                                 // MOSI - GPIO 10 - Pin 19
                                 // MISO - GPIO 9  - Pin 21
                                 // CE1  - GPIO 7  - Pin 26
          1,                     // Device selection (CE1)
          PolarityLow,           // Device selection polarity
          FourWireMode,          // WireMode
          8,                     // DataBit len
          ControllerInitiated,   // Slave mode
          4000000,               // Connection speed
          ClockPolarityLow,      // Clock polarity
          ClockPhaseFirst,       // Clock phase
          "\\_SB.SPI0",          // ResourceSource: SPI bus controller name
          0,                     // ResourceSourceIndex
                                 // Resource usage
                                 // DescriptorName: creates name for offset of resource descriptor
        )                        // Vendor Data
    
        // Index 2
        I2CSerialBus (           // Pin 3 (GPIO2, SDA1), 5 (GPIO3, SCL1)
          0xFFFF,                // SlaveAddress: placeholder
          ,                      // SlaveMode: default to ControllerInitiated
          0,                     // ConnectionSpeed: placeholder
          ,                      // Addressing Mode: default to 7 bit
          "\\_SB.I2C1",          // ResourceSource: I2C bus controller name
          ,
          ,
          ,                      // Descriptor Name: creates name for offset of resource descriptor
        )                        // Vendor Data
    
        // Index 3
        SPISerialBus (           // SPI1_SCLK - GPIO21
                                 // SPI1_MOSI - GPIO20
                                 // SPI1_MISO - GPIO19
                                 // SPI1_CE2_N - GPIO16
          2,                     // Device selection (CE2)
          PolarityLow,           // Device selection polarity
          FourWireMode,          // WireMode
          8,                     // DataBit len
          ControllerInitiated,   // Slave mode
          4000000,               // Connection speed
          ClockPolarityLow,      // Clock polarity
          ClockPhaseFirst,       // Clock phase
          "\\_SB.SPI1",          // ResourceSource: SPI bus controller name
          0,                     // ResourceSourceIndex
                                 // Resource usage
                                 // DescriptorName: creates name for offset of resource descriptor
        )                        // Vendor Data
    
        // GPIO 2
        GpioIO (Shared, PullUp, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 2 }
        GpioInt (Edge, ActiveBoth, Shared, PullUp, 0, "\\_SB.GPI0",)                          { 2 }
        // GPIO 3
        GpioIO (Shared, PullUp, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 3 }
        GpioInt (Edge, ActiveBoth, Shared, PullUp, 0, "\\_SB.GPI0",)                          { 3 }
        // GPIO 4
        GpioIO (Shared, PullUp, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 4 }
        GpioInt (Edge, ActiveBoth, Shared, PullUp, 0, "\\_SB.GPI0",)                          { 4 }
        // GPIO 5
        GpioIO (Shared, PullUp, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 5 }
        GpioInt (Edge, ActiveBoth, Shared, PullUp, 0, "\\_SB.GPI0",)                          { 5 }
        // GPIO 6
        GpioIO (Shared, PullUp, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 6 }
        GpioInt (Edge, ActiveBoth, Shared, PullUp, 0, "\\_SB.GPI0",)                          { 6 }
        // GPIO 7
        GpioIO (Shared, PullUp, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 7 }
        GpioInt (Edge, ActiveBoth, Shared, PullUp, 0, "\\_SB.GPI0",)                          { 7 }
        // GPIO 8
        GpioIO (Shared, PullUp, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 8 }
        GpioInt (Edge, ActiveBoth, Shared, PullUp, 0, "\\_SB.GPI0",)                          { 8 }
        // GPIO 9
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 9 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 9 }
        // GPIO 10
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 10 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 10 }
        // GPIO 11
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 11 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 11 }
        // GPIO 12
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 12 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 12 }
        // GPIO 13
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 13 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 13 }
        // NTRAID#MSFT-7141401-2016/04/7-jordanrh - disable UART muxing
        // until a proper solution can be created for the dmap conflict
        // GPIO 14 - UART TX
        // GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 14 }
        // GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 14 }
        // GPIO 15 - UART RX
        // GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 15 }
        // GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 15 }
        // GPIO 16
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 16 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 16 }
        // GPIO 17
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 17 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 17 }
        // GPIO 18
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 18 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 18 }
        // GPIO 19
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 19 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 19 }
        // GPIO 20
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 20 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 20 }
        // GPIO 21
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 21 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 21 }
        // GPIO 22
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 22 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 22 }
        // GPIO 23
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 23 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 23 }
        // GPIO 24
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 24 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 24 }
        // GPIO 25
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 25 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 25 }
        // GPIO 26
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 26 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 26 }
        // GPIO 27
        GpioIO (Shared, PullDown, 0, 0, IoRestrictionNone, "\\_SB.GPI0", 0, ResourceConsumer,,) { 27 }
        GpioInt (Edge, ActiveBoth, Shared, PullDown, 0, "\\_SB.GPI0",)                          { 27 }
      })
    
      Name (_DSD, Package()
      {
        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
        Package ()
        {
          // Reference http://www.raspberrypi.org/documentation/hardware/raspberrypi/spi/README.md
          // SPI 0
          Package (2) { "bus-SPI-SPI0", Package() { 0, 1 } },                   // Index 0 & 1
          Package (2) { "SPI0-MinClockInHz", 7629 },                            // 7629 Hz
          Package (2) { "SPI0-MaxClockInHz", 125000000 },                       // 125 MHz
          Package (2) { "SPI0-SupportedDataBitLengths", Package() { 8 } },      // Data Bit Length
          // I2C1
          Package (2) { "bus-I2C-I2C1", Package() { 2 } },
          // GPIO Pin Count and supported drive modes
          Package (2) { "GPIO-PinCount", 54 },
          Package (2) { "GPIO-UseDescriptorPinNumbers", 1 },
          Package (2) { "GPIO-SupportedDriveModes", 0xf },                      // InputHighImpedance, InputPullUp, InputPullDown, OutputCmos
          // SPI 1
          Package (2) { "bus-SPI-SPI1", Package() { 3 }},                       // Index 3
          Package (2) { "SPI1-MinClockInHz", 30511 },                           // 30.5 kHz
          Package (2) { "SPI1-MaxClockInHz", 20000000 },                        // 20 MHz
          Package (2) { "SPI1-SupportedDataBitLengths", Package() { 8 } },      // Data Bit Length
        }
      })
    }

  }
}
